#!/usr/bin/env python

from nfspy import NfSpy, NFSError, NF3DIR
from optparse import OptionParser
import os
import errno
import sys
import shlex
import re
import posixpath as path
from datetime import datetime
import inspect
import logging

logging.basicConfig(level=logging.DEBUG)

reUnicode = re.compile(r'\{\{(?P<codepoint>\d+)\}\}')
def uncode(string):
    ret = ''
    pos = 0
    for m in reUnicode.finditer(string):
        ret += string[pos:m.start()]
        ret += unichr(int(m.group('codepoint')))
        pos = m.end()
    ret += string[pos:]
    return ret

def report(e):
    sys.stderr.write("{0}\n".format(str(e)))

class Exit(Exception):
    pass

class Commands(object):
    def __init__(self, shell):
        self.shell = shell
    def __call__(self, *args):
        if hasattr(self, args[0]):
            func = getattr(self, args[0])
            try:
                func(*args[1:])
            except TypeError:
                err = func.__doc__
                if err:
                    sys.stderr.write("Usage: {0}\n".format(err.split("\n",1)[0]))
                else:
                    sys.stderr.write("{0}: Incorrect usage\n".format(func.__name__))
            except (IOError,NFSError) as e:
                report(e)
        else:
            print "Unknown command: {0}".format(args[0])

    def help(self, cmd=None):
        """help [<cmd>]
        
        Print a list of known commands. With <cmd>, print the help for <cmd>."""
        if cmd:
            if hasattr(self, cmd) and not cmd.startswith("_"):
                func = getattr(self, cmd)
                print func.__doc__ or "No help for {0}".format(cmd)
            else:
                print "Unknown command: {0}".format(cmd)
        else:
            print "Known commands:"
            for c, _ in inspect.getmembers(self, inspect.ismethod):
                if not c.startswith("_"):
                    print "    {0}".format(c)

    def cd(self, directory):
        """cd <dir>
        
        Change remote working directory to <dir>."""
        self.shell.rcwd = self.shell.canonicalize(directory)
        self.shell.spy.getattr(self.shell.rcwd)

    def lcd(self, directory):
        """lcd <dir>
        
        Change local working directory to <dir>."""
        os.chdir(directory)

    def pwd(self):
        """pwd
        
        Print the current remote working directory."""
        print self.shell.rcwd
    
    def lpwd(self):
        """lpwd
        
        Print the current local working directory."""
        print os.getcwd()

    def ls(self, filename="."):
        """ls [<filename>]
        
        Print info about <filename>. <filename> defaults to '.'.
        Columns are Mode, UID, GID, Size, Mtime, and Name."""
        f = self.shell.canonicalize(filename)
        lines = None
        dirname = None
        if self.shell.isdir(f):
            dirname = f
            lines = self.shell.spy.readdir(f,0)
        else:
            dirname = path.dirname(f)
            lines = [(None,path.basename(f))]
        print "{0}:".format(dirname)
        for entry in lines:
            attr = self.shell.spy.getattr(path.join(dirname,entry[1]))
            print "{mode:06o} {uid: >5} {gid: >5} {size: >10} {date!s} {name}".format(
                    mode=attr.st_mode,
                    uid=attr.st_uid,
                    gid=attr.st_gid,
                    size=attr.st_size,
                    date=datetime.fromtimestamp(attr.st_mtime),
                    name=entry[1]
                    )

    def get(self, filename, localname=None):
        """get <filename> [<localname>]
        
        Retrieve <filename> and save to <localname>. If no <localname> is given,
        defaults to the basename of <filename> in the current local working directory."""
        f = self.shell.canonicalize(filename)
        size = self.shell.spy.getattr(f).st_size
        localname = localname or path.basename(f)
        out = open(localname, "w")
        bsize = 4096 # 4KB, change for your blocksize?
        for offset in range(0, size, bsize):
            out.write( self.shell.spy.read(f, bsize, offset) )
        out.close()

    def put(self, filename, remotename=None):
        """put <filename> [<remotename>]
        
        Upload <filename> to <remotename>. If no <remotename> is given,
        defaults to the basename of <filename> in the current remote working directory."""
        size = os.path.getsize(filename)
        filein = open(filename, "r")
        remotename = remotename or os.path.basename(filename)
        f = self.shell.canonicalize(remotename)
        bsize = 4096 # 4KB, change for your blocksize?
        self.shell.spy.mknod(f, 0100666, 0) #regular file chmod 666
        for offset in range(0, size, bsize):
            self.shell.spy.write( f, filein.read(min(bsize, size-offset)), offset )
        filein.close()

    def exit(self):
        """exit
        
        Close nfspysh, shutting down connection to the server."""
        raise Exit

class Shell(object):
    def __init__(self, spy):
        self.spy = spy
        self.spy.fsinit()
        self.runner = Commands(self)
        self.rcwd = "/"

    def canonicalize(self,pathname):
        ret = None
        if path.isabs(pathname):
            ret = path.normpath( pathname )
        else:
            ret = path.normpath( path.join( self.rcwd, pathname ) )
        return ret

    def isdir(self, pathname):
        pathname = self.canonicalize(pathname)
        _, fattr = self.spy.gethandle(pathname)
        return fattr[0] == NF3DIR

    def prompt(self):
        return "nfspy@{server}:{export}:{path}> ".format(
            server = self.spy.host,
            export = self.spy.path,
            path = self.rcwd
            )

    def docmd(self, line):
        line = line.strip()
        if line == "":
            return
        try:
            line = line.encode('ascii')
        except UnicodeEncodeError:
            try:
                line2 = ''
                for c in line:
                    if ord(c) < 128:
                        line2 += c
                    else:
                        line2 += '{{%d}}'%(ord(c))
                line = line2.encode('ascii')
            except TypeError:
                print "Can't handle that code point"
                return
        arr = map(uncode, shlex.split(line, posix=False))
        self.runner(*arr)

    def run(self):
        sys.stdout.write(self.prompt())
        line = sys.stdin.readline().decode(sys.stdin.encoding)
        while line:
            try:
                self.docmd(line)
            except Exit:
                break
            except Exception as e:
                logging.exception(e)
            sys.stdout.write(self.prompt())
            line = sys.stdin.readline().decode(sys.stdin.encoding)
        print "Quitting."

    def close(self):
        self.spy.fsdestroy()

if __name__ == '__main__':
    spy = None
    def parse_mountopts(option, opt_str, value, parser):
        opts = {}
        for pair in (o.split('=') for o in value.split(',')):
            try:
                opts[pair[0]] = pair[1]
            except IndexError:
                opts[pair[0]] = True
        parser.values.spy = NfSpy(**opts)

    parser = OptionParser()
    parser.add_option('-o', action='callback', nargs=1, type='string', callback=parse_mountopts,
            metavar="OPTIONS",
            help="Mount options as in nfspy")
    parser.add_option('-c', action='store', nargs=1, type='string', dest="batchcommand",
            metavar="COMMAND",
            help="Semicolon-separated commands to run (batch mode)")

    (opts, args) = parser.parse_args()

    sh = Shell(parser.values.spy)
    #Print some info from statfs?

    if opts.batchcommand:
        for cmd in opts.batchcommand.split(';'):
            sh.docmd(cmd)
    else:
        sh.run()
    
    sh.close()
